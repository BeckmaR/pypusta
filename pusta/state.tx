Diagram:
    '@startuml'
    expressions*=Expression
    '@enduml'
;

Expression:
    TransitionExpression | StateDescriptionExpression | MetaExpression | StateDeclarationExpression |
    StateAliasExpression
;

StateDeclarationExpression:
    'state' name=ID type=StateType
;

StateType:
    CompositeState | ParallelState | PseudoState | SimpleState
;

CompositeState:
    '{'
    expressions*=Expression
    '}'
;

ParallelState:
    '{'
    regions*=Region
    '}'
;

SimpleState: '';

Region:
    expressions*=Expression RegionSeparator?
;

RegionSeparator:
    HorizontalRegionSeparator | VerticalRegionSeparator
;

TransitionExpression:
    src=StateIdentifier Arrow dest=StateIdentifier (':' description=Text)?
;

StateDescriptionExpression:
    state=RegularState ':' description=Text
;

MetaExpression:
    HideEmptyDescriptionExpression | ScaleExpression
;

StateAliasExpression:
    'state' longname=STRING 'as' name=ID
;

PseudoStateDeclarationExpression:
    'state' name=ID type=PseudoStateType
;

HideEmptyDescriptionExpression:
    'hide empty description'
;

ScaleExpression:
    'scale' scale=INT 'width'
;

StateIdentifier:
    NestedHistoryState | RegularState | InitialFinalState | HistoryState
;

NestedHistoryState:
    parent_name=/[^\d\W]\w*/ history=HistoryState
;

RegularState:
    name=ID (type=PseudoState)?
;

PseudoState:
    type=PseudoStateType
;

PseudoStateType:
    '<<fork>>' | '<<join>>' | '<<choice>>' | '<<end>>' | '<<entryPoint>>' | '<<exitPoint>>'
;

InitialFinalState: '[*]';
HistoryState: '[H' is_deep ?= '*' ']';

Text:
    /(.*?)\n/
;

Arrow:
    '->' | '-->'
;

HorizontalRegionSeparator: '--';
VerticalRegionSeparator: '||';